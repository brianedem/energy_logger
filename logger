#!/bin/env python3

import logging
import time
import datetime
import subprocess
import sys
import os
import mariadb

# database accounts:
# power_update  for writing to database locally
# power_view    for reading database, even remotely

log = logging.getLogger(__name__)
logging.basicConfig(filename='energy_logger.logger.log', encoding='utf-8', level=logging.WARN)

# create a timestamp for yesterday as we are summerizing yesterday's usage
date = (datetime.date.today()-datetime.timedelta(hours=12)).strftime('%Y-%m-%d')
log.debug(f'{date=}')

# INSERT the timestamp into the database; other fields will be NULL until later
try:
    mdb = mariadb.connect(user='power_update', database='elpowerdb')
    mc = mdb.cursor()
    sql = f'INSERT INTO daily_energy (day) VALUES ("{date}")'
    log.debug(sql)
    mc.execute(sql)
except mariadb.Error as e:
    log.exception(f'Error connecting to the database: {e}')
    sys.exit(1)

cwd = os.path.dirname(__file__)
pp_read = os.path.join(cwd, '../picow-peacefair/pp-read.py')

modbus_solar = os.path.join(cwd, 'modbus_solar')
sEdge = os.path.join(modbus_solar, 'sEdge.py')

# readings are from either Peacefair devices or from the solar inverter
# first read the Peacefair devices via HTTP/JSON
peacefair_list = {
    'waterheater':  'waterheater.lan',
    'condenser':    'condenser.lan',
    'evaporator':   'evaporator.lan',
}

# peacefair meters read via a picow are read individually via HTTP
for d in peacefair_list:
    pf_command = [pp_read, peacefair_list[d], 'energy']
    pf_response = subprocess.run(pf_command, capture_output=True)
    if pf_response.returncode != 0:
        log.warning(f'read from {d} failed')
        continue

    value = pf_response.stdout.decode().strip()
    log.debug(f'{pf_response.stdout=}, {value=}')

    sql = f'UPDATE daily_energy SET {d}={value} WHERE day = "{date}"'
    log.debug(sql)
    try:
        mc.execute(sql)
    except mariadb.Error as e:
        log.exception(f'Error updating {d} in database: {e}')
        sys.exit(1)
mdb.commit()

# now read the inverter values via modbus/TCP
sedge_list = {
    'SE11400H.inverter.WH': 'solar_inv_pro',
    'SE-RGMTR.ac_meter.TotWhImp': 'solar_inv_imp',
    'SE-RGMTR.ac_meter.TotWhExp': 'solar_inv_exp',
    'SE-MTR.ac_meter.TotWhImp': 'house_imp',
    'SE-MTR.ac_meter.TotWhExp': 'house_exp',
    }

# the solar inverter provides several meters that can read in a single query
se_command = ['venv/bin/python3', sEdge] + list(sedge_list)
se_response = subprocess.run(se_command, capture_output=True)
if se_response.returncode != 0:
    log.warning(f'reading solarEdge inverter failed')
    sys.exit()

# organize the responses as a list
se_readings = se_response.stdout.decode().splitlines()
if len(se_readings) < (len(sedge_list) + 1):
    log.warning(f'sEdge response is less than expected')

# verify the responses and create the SQL UPDATE SET parameters
set_params = []
for reading in se_readings:
    if reading.endswith(' Wh'):
        name,value,units = reading.split()
        if name in sedge_list:
            set_params.append(f'{sedge_list[name]}={value}')

sql = f'UPDATE daily_energy SET {",".join(set_params)} WHERE day="{date}"'
log.debug(sql)
try:
    mc.execute(sql)
except mariadb.Error as e:
    log.exception(f'Error updating inverter values in database: {e}')
    sys.exit(1)
else:
    mdb.commit()

sys.exit(0)
